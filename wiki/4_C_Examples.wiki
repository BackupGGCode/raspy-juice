#summary Userspace C examples of interacting with Raspy Juice.
#labels Featured

= 1. Introduction *DRAFT IN PROGRESS* =
----
Raspy Juice (*_Juice_*) is primarily a power supply board for the Raspberry Pi (*_RPi_*) supplying a regulated +5V via the GPIO header, and with added conveniences of a real-time clock (RTC) and an RS232-level console port. However, it also sports an Atmel ATmega168A AVR microcontroller (*_MCU_*) attached to the RPi as an I2C slave, and has its GPIO and analog pins exposed out for interfacing experiments. See HardwareDescription. The MCU itself is running a firmware service that emulates an I2C register set, which allows a userspace application to control and interact with the interfaces.

This document is to show how to interact with this AVR microcontroller from user-written application programs.
<br>
<br>
<br>

= 2. Prerequisites =
----
For a userspace application to interact with the AVR MCU interfaces, the are several prerequisites that must be met. 
  # the linux kernel must be enabled with the I2c bus driver (see [http://code.google.com/p/raspy-juice/wiki/3_Updating_the_Firmware#2.1_Setting_up_the_linux_kernel_I2C_bus Setting up the linux kernel I2C bus] )
  # the Raspy Juice MCU must be seen as an I2C slave on the I2C bus (see http://code.google.com/p/raspy-juice/wiki/3_Updating_the_Firmware#2.2_Verifying_Raspy_Juice_as_an_I2C_device_on_the_kernel_bus Verifying Raspy Juice on I2C...] )
  # communicate and program the Raspy Juice using the lib-juice.c library calls.
<br>
<br>
<br>

= 3. Compiling with lib-juice.c C library calls =
----


<br>
<br>
<br>

= 4. Communicating with Raspy Juice =
----

=== 4.1 Opening Raspy Juice ===
The below example is a snippet to open the Raspy Juice as an I2C slave device and exit.
{{{
#include "juice-dev.h"
#include "../firmware/juice.h"

int main(int argc, char *argv[])
{
    char devbusname[] = "/dev/i2c-0";
    int i2caddr = AVRSLAVE_ADDR;

    rval = rj_open(devbusname, i2caddr);
    if (rval < 0) {
        printf("open %s: failed, rval = %d\n", devbusname, rval);
        exit(1);
    }
    else
        printf("juice: open at 0x%02x: succeeded.\n", i2caddr);

    version = rj_getversion();
    if (version != NULL)
        printf("juice: firmware version = %s\n", version);
    else {
        printf("juice: rj_getversion failed.\n");
        exit(2);
    }
    printf("\n");

    return 0;
}
}}}
The first two include header files are necessary for opening the I2C bus and device as a file, and the third include header file are the Raspy Juice constants. 

=== 4.2 Reading the firmware version ===
=== 4.3 Controlling the servo outputs  ===
=== 4.4 Reading the firmware version ===
=== 4.5 Reading the status register  ===
=== 4.6 Reading the analog-to-digital convertors ===
=== 4.7 RS232 Interface ===
=== 4.8 RS485 Interface ===
=== 4.9 GPIO Interface ===