#Instructions to update the Raspy Juice firmware.

= 1.0 Introduction =

Raspy Juice (*_Juice_*) is primarily a power supply board for the Raspberry Pi (*_RPi_*) supplying a regulated +5V via the GPIO header, and with added conveniences of a real-time clock (RTC) and an RS232-level console port. However, it also sports an Atmel ATmega168A AVR microcontroller (*_MCU_*) attached to the RPi as an I2C slave, and has its GPIO and analog pins exposed out for interfacing experiments. See HardwareDescription. The MCU itself is running a firmware service that emulates an I2C register set, which allows a userspace application to control and interact with the interfaces.

This document is to show how to interact with this AVR microcontroller from user-written application programs.

= 2.0 Prerequisites =

For a user to interact with, and update the MCU firmware, there are several prerequisites that must be met. 
  # the linux kernel must be enabled with the I2C bus driver
  # the MCU must be seen as an I2C slave on the linux I2C bus
  # the MCU must be able to be commanded into _bootloader_ mode
  # the _bootloader_ tools must be installed or built
  # the firmware must be available or built

=== 2.1 Setting up the linux kernel I2C bus ===
Generally everything written here is for the RPi running the Raspbian/Debian/Wheezy/armhf stock distribution from the Raspberry Pi foundation.
In this distribution, the I2C modules are blacklisted by default in /etc/modprobe.d/raspi-blacklist.conf. It is OK to leave this file untouched, because modules can be instructed to pre-load at linux boot time by the /etc/modules.conf or */etc/modules* files.

Edit */etc/modules* and add the two lines so that it will at least look like the two i2c lines are there. (you'd have to be root to do this, or sudo) and reboot.
{{{
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
# Parameters can be specified after the module name.

snd-bcm2835
i2c-dev
i2c-bcm2708
}}}
Then reboot. After which, you should be able to list the i2c busses in the */dev* directory like below:
{{{
pi@rpdev /etc $ ls -l /dev/*i2c*
crw-rw---T 1 root root 89, 0 Aug  4 04:19 /dev/i2c-0
crw-rw---T 1 root root 89, 1 Aug  4 04:19 /dev/i2c-1
}}}

=== 2.2 Verifying Raspy Juice as an I2C device on the kernel bus ===
For interacting with I2C busses and devices, the proper tools will have to be installed.

{{{
sudo apt-get update
sudo apt-get install i2c-tools
}}}
When the above tools are installed, a group called *_i2c_* is automatically created. When the above listing of /dev is performed again, the I2C busses will be co-owned by this group.
{{{
pi@rpdev /etc $ ls -l /dev/*i2c*
crw-rw---T 1 root i2c 89, 0 Jan  1  1970 /dev/i2c-0
crw-rw---T 1 root i2c 89, 1 Jan  1  1970 /dev/i2c-1
}}}

Now, non-root users need to be upgraded to interact with I2C busses and devices. 
{{{
sudo usermod -aG i2c yourusername
}}}


Then, verify that Raspy Juice is on the I2C-0 bus.
{{{
pi@rpdev ~ $ ls -l /dev/i2c*
crw-rw---T 1 root i2c 89, 0 Jan  1  1970 /dev/i2c-0
crw-rw---T 1 root i2c 89, 1 Jan  1  1970 /dev/i2c-1

pi@rpdev ~ $ i2cdetect -l
i2c-0	i2c       	bcm2708_i2c.0                   	I2C adapter
i2c-1	i2c       	bcm2708_i2c.1                   	I2C adapter

pi@rpdev ~ $ i2cdetect -y 0
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- -- -- -- -- -- -- -- -- -- -- -- -- 
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
40: -- -- -- -- -- -- -- -- 48 -- -- -- -- -- -- -- 
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
60: -- -- -- -- -- -- -- -- UU -- -- -- -- -- -- -- 
70: -- -- -- -- -- -- -- --                         
pi@rpdev ~ $ 
}}}
In the above log, _i2cdetect_ has detected two devices sitting on I2C bus 0 or /dev/i2c-0. *_'UU'_* is a device that has been registered with the kernel and generally unwise to interact with such a kernel-owned device. In this case, the Raspy Juice NXP8523 RTC has been registered with the kernel with an I2C slave address of 0x68. *_'48'_* is the Raspy Juice MCU with a firmware service emulating as an I2C slave device, sitting on the bus 0 with an address of *0x48*.
